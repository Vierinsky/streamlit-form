# Formulario de Sueldos

# TODO:
#   - Leyes sociales:
#       - (Completar)
#   - Sueldo operario: El total de d√≠as trabajados se divide en distintos cultivos donde trabaj√≥.
#                      Su sueldo se divide en esos d√≠as y se registra en el cultivo correspondiente.
#   - No se utiliza factura.
#   - Se suman gratificaciones (Transporte, Alimentaci√≥n), las que se suman despu√©s de todos los descuentos. 

from google.oauth2.service_account import Credentials
import gspread
import json
import os
import pandas as pd
import streamlit as st

# === Configuraci√≥n Google Sheets ===
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

SHEET_NAME = "prueba_streamlit"  # ‚ö†Ô∏èModificar en producci√≥n‚ö†Ô∏è

# === Funciones de Utilidad ===
def get_fresh_spreadsheet():
    """
    Devuelve una conexi√≥n activa a Google Sheets. Si ya existe en session_state, la reutiliza.

    Returns:
        gspread.Spreadsheet: conexi√≥n activa.
    """
    if "spreadsheet" not in st.session_state:
        service_account_info = json.loads(os.environ["GCP_SERVICE_ACCOUNT"])
        credentials = Credentials.from_service_account_info(service_account_info, scopes=SCOPE)
        client = gspread.authorize(credentials)
        st.session_state["spreadsheet"] = client.open(SHEET_NAME)
    return st.session_state["spreadsheet"]

@st.cache_data(ttl=300)
def cargar_dataframe(nombre_hoja):
    """
    Carga todos los datos de una hoja en Google Sheets como DataFrame.
    """
    try:
        sheet = get_fresh_spreadsheet().worksheet(nombre_hoja)
        data = sheet.get_all_records()
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"‚ùå Error al cargar hoja '{nombre_hoja}': {e}")
        return pd.DataFrame()

# === Conexi√≥n Inicial ===
try:
    spreadsheet = get_fresh_spreadsheet()
    with st.sidebar:
        with st.expander("üîß Estado de conexi√≥n", expanded=False):
            st.success("‚úÖ Conexi√≥n con Google Sheets exitosa")
            st.success(f"‚úÖ Hoja activa: '{SHEET_NAME}'")
except Exception as e:
    st.sidebar.error("‚ùå Fall√≥ la conexi√≥n con Google Sheets")
    st.stop()

# === Calculo leyes sociales ===

# Porcentajes leyes sociales
    # REVISAR
TASAS = {
    "Indefinido": {
        "afp": 0.10,
        "salud": 0.07,
        "cesantia_trabajador": 0.006,
        "cesantia_empleador": 0.024,
        "sis": 0.0153,
        "atep": 0.0093
    },
    "Plazo Fijo": {
        "afp": 0.10,
        "salud": 0.07,
        "cesantia_trabajador": 0.0,
        "cesantia_empleador": 0.03,
        "sis": 0.0153,
        "atep": 0.0093
    },
    "Honorarios": {
        "afp": 0.0,
        "salud": 0.0,
        "cesantia_trabajador": 0.0,
        "cesantia_empleador": 0.0,
        "sis": 0.0,
        "atep": 0.0
    }
}

def calcular_leyes_sociales(sueldo_bruto: int, tipo_contrato: str) -> dict:
    """
    Calcula el desglose de leyes sociales para un trabajador en Chile seg√∫n su tipo de contrato.

    Args:
        sueldo_bruto (int): Sueldo bruto mensual del trabajador.
        tipo_contrato (str): Tipo de contrato del trabajador. Debe ser una clave v√°lida en el diccionario TASAS.

    Returns:
        dict: Un diccionario con el monto correspondiente a cada componente de las leyes sociales, 
              seg√∫n las tasas establecidas para el tipo de contrato. Si el tipo de contrato no existe 
              en TASAS, se retorna un diccionario vac√≠o.
    
    Ejemplo de retorno:
        {
            "afp": 10000,
            "salud": 7000,
            "seguro_cesantia": 3000
        }
    """
    tasas = TASAS.get(tipo_contrato	, {})
    detalle = {}

    for item, tasa in tasas.item():
        detalle[item] = round(sueldo_bruto * tasa)
    
    detalle["total_aportes"] = sum(detalle.values())
    
    return detalle

# === Formulario Principal ===
st.title("üìã Formulario de Registro de Sueldos")

st.text_input(
    "Escriba nombre del trabajador",
    placeholder="Nombre completo"
)

tipo_contrato = st.radio("Seleccione tipo de contrato", ["Indefinido", "Plazo Fijo", "Honorarios"])

sueldo_bruto = st.number_input(
    "Inserte sueldo bruto:",
    min_value=0, 
    step=1,
    format="%d"
)

leyes = calcular_leyes_sociales(sueldo_bruto, tipo_contrato)

# Formateo visual con separador de miles (solo display opcional)
monto_formateado = f"{sueldo_bruto:,}".replace(",", ".")  # convierte 10000 ‚Üí "10.000"
st.write(f"Sueldo Bruto = ${monto_formateado}")
st.write(f"Prevision (AFP) = ${leyes['afp']}")
st.write(f"Salud (Fonasa o Isapre) = ${leyes['salud']}")
st.write(f"Seguro de Cesant√≠a (Trabajador) = ${leyes['cesantia_trabajador']}")
st.write(f"Seguro de Cesant√≠a (Empleador) = ${leyes['cesantia_empleador']}")
st.write(f"Cotizaci√≥n SIS (por invalidez y sobrevivencia) = ${leyes['sis']}")
st.write(f"Accidentes del Trabajo (ATEP) = ${leyes['atep']}")

 
# 1. Ingrese sueldo bruto
#       - Que muestre desglose.
#       - Que permita dividir el sueldo seg√∫n d√≠as trabajados en x cultivo.
#       - Que se agregue nombre del trabajador. 

# 2. Desea agregar Gratificaciones?

# Nota: 
#   ¬øDebe haber secci√≥n banco tambi√©n?
#   ¬øSi se tiene a un trabajador contratado se debe auto agregar todos los meses su sueldo?
#   ¬øSe necesita info m√°s detallada del trabajador? Ej: RUT u otros.

# 3. Mostrar res√∫men
# 4. Secci√≥n "Comentario"
# 4. Enviar formulario