# Formulario de Sueldos

# TODO:
#   - Leyes sociales:
#       - (Completar)
#   - Sueldo operario: El total de d√≠as trabajados se divide en distintos cultivos donde trabaj√≥.
#                      Su sueldo se divide en esos d√≠as y se registra en el cultivo correspondiente.
#   - No se utiliza factura.
#   - Se suman gratificaciones (Transporte, Alimentaci√≥n), las que se suman despu√©s de todos los descuentos. 

from google.oauth2.service_account import Credentials
import gspread
import json
import os
import pandas as pd
import streamlit as st

# === Configuraci√≥n Google Sheets ===
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

SHEET_NAME = "prueba_streamlit"  # ‚ö†Ô∏èModificar en producci√≥n‚ö†Ô∏è

# === Funciones de Utilidad ===
def get_fresh_spreadsheet():
    """
    Devuelve una conexi√≥n activa a Google Sheets. Si ya existe en session_state, la reutiliza.

    Returns:
        gspread.Spreadsheet: conexi√≥n activa.
    """
    if "spreadsheet" not in st.session_state:
        service_account_info = json.loads(os.environ["GCP_SERVICE_ACCOUNT"])
        credentials = Credentials.from_service_account_info(service_account_info, scopes=SCOPE)
        client = gspread.authorize(credentials)
        st.session_state["spreadsheet"] = client.open(SHEET_NAME)
    return st.session_state["spreadsheet"]

@st.cache_data(ttl=300)
def cargar_dataframe(nombre_hoja):
    """
    Carga todos los datos de una hoja en Google Sheets como DataFrame.
    """
    try:
        sheet = get_fresh_spreadsheet().worksheet(nombre_hoja)
        data = sheet.get_all_records()
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"‚ùå Error al cargar hoja '{nombre_hoja}': {e}")
        return pd.DataFrame()

# === Conexi√≥n Inicial ===
try:
    spreadsheet = get_fresh_spreadsheet()
    with st.sidebar:
        with st.expander("üîß Estado de conexi√≥n", expanded=False):
            st.success("‚úÖ Conexi√≥n con Google Sheets exitosa")
            st.success(f"‚úÖ Hoja activa: '{SHEET_NAME}'")
except Exception as e:
    st.sidebar.error("‚ùå Fall√≥ la conexi√≥n con Google Sheets")
    st.stop()

# === Calculo leyes sociales ===

# Porcentajes leyes sociales
    # REVISAR (pq lo hizo DonGepe)
TASAS = {
    "Indefinido": {
        "afp": 0.10,
        "salud": 0.07,
        "cesantia_trabajador": 0.006,
        "cesantia_empleador": 0.024,
        "sis": 0.0153,
        "atep": 0.0093
    },
    "Plazo Fijo": {
        "afp": 0.10,
        "salud": 0.07,
        "cesantia_trabajador": 0.0,
        "cesantia_empleador": 0.03,
        "sis": 0.0153,
        "atep": 0.0093
    },
    "Honorarios": {
        "afp": 0.0,
        "salud": 0.0,
        "cesantia_trabajador": 0.0,
        "cesantia_empleador": 0.0,
        "sis": 0.0,
        "atep": 0.0
    }
}

def calcular_leyes_sociales(sueldo_bruto: int, tipo_contrato: str) -> dict:
    """
    Calcula el desglose de leyes sociales para un trabajador en Chile seg√∫n su tipo de contrato.

    Args:
        sueldo_bruto (int): Sueldo bruto mensual del trabajador.
        tipo_contrato (str): Tipo de contrato del trabajador. Debe ser una clave v√°lida en el diccionario TASAS.

    Returns:
        dict: Un diccionario con el monto correspondiente a cada componente de las leyes sociales, 
              seg√∫n las tasas establecidas para el tipo de contrato. Si el tipo de contrato no existe 
              en TASAS, se retorna un diccionario vac√≠o.
    
    Ejemplo de retorno:
        {
            "afp": 10000,
            "salud": 7000,
            "seguro_cesantia": 3000
        }
    """
    tasas = TASAS.get(tipo_contrato	, {})
    detalle = {}

    for item, tasa in tasas.items():
        detalle[item] = round(sueldo_bruto * tasa)
    
    detalle["total_aportes"] = sum(detalle.values())
    
    return detalle

# === Formulario Principal ===
st.title("üìã Formulario de Registro de Sueldos")

# ‚úÖ Mostrar mensaje de √©xito si se acaba de guardar un registro
if st.session_state.get("registro_guardado"):
    st.toast("Registro guardado con √©xito", icon="‚úÖ")
    st.session_state["registro_guardado"] = False

nombre_trabajador = st.text_input(
    "Escriba nombre del trabajador",
    placeholder="Nombre completo"
)

# TODO: AGREGAR RUT

# === D√≠as trabajados por cultivo / Ceco ===

def get_fresh_spreadsheet():
    """
    Devuelve una conexi√≥n activa a Google Sheets. Si ya existe en session_state la reutiliza.

    Returns:
        gspread.Spreadsheet: conexi√≥n activa.
    """
    if "spreadsheet" not in st.session_state:
        service_account_info = json.loads(os.environ["GCP_SERVICE_ACCOUNT"])
        credentials = Credentials.from_service_account_info(service_account_info, scopes=SCOPE)
        client = gspread.authorize(credentials)
        st.session_state["spreadsheet"] = client.open(SHEET_NAME)
    return st.session_state["spreadsheet"]

@st.cache_data(ttl=300)
def cargar_hoja(nombre_hoja: str) -> list[dict]:
    """
    Lee todos los registros de una hoja de Google Sheets y cachea el resultado.

    Args:
        nombre_hoja (str): nombre de la pesta√±a a leer.

    Returns:
        list: Lista de diccionarios.
    """
    sheet = get_fresh_spreadsheet().worksheet(nombre_hoja)
    return sheet.get_all_records()

# LISTA DE CULTIVOS
    # Obtener lista din√°mica de cultivos desde la hoja 'cultivos'
try:
    data = cargar_hoja("cultivos")
    cultivo_list = [r["cultivo"] for r in data if r["cultivo"].strip()]
except Exception as e:
    st.error(f"‚ùå Error al cargar la lista de centro de cultivos: {e}")
    cultivo_list = []


# === D√≠as trabajados ===
st.divider()
# Multiselect para elegir cultivos
cultivos_trabajados = st.multiselect(
    "Seleccione √°rea o cultivo en que trabaj√≥",     # ¬øComentar que es (Selecci√≥n M√∫ltiple)?
    cultivo_list,
    placeholder="Escoja una o m√°s opciones"
)

# Diccionario para almacenar d√≠as trabajados por cultivo
dias_por_cultivo = {}

for cultivo in cultivos_trabajados:
    # Obtener d√≠as trabajados por cultivo
    dias_trabajados = st.number_input(
        f"D√≠as trabajados en {cultivo}", 
        min_value=1, 
        step=1,
        format="%d"
        )
    
    # A√±adir cultivo al dicc junto con sus d√≠as trabajados
    dias_por_cultivo[cultivo] = dias_trabajados

# Convertir el diccionario en lista de tuplas
datos = [{"Cultivo": cultivo, "D√≠as": dias} for cultivo, dias in dias_por_cultivo.items()]

# Armando dataframe para d√≠as trabajados por cultivo
df_dias_por_cultivo = pd.DataFrame(datos)

if dias_por_cultivo != {}:
    st.markdown("### Res√∫men d√≠as trabajados por cultivo")
    st.table(df_dias_por_cultivo)

# === Sueldo Bruto ===
st.divider()

tipo_contrato = st.radio("Seleccione tipo de contrato", ["Indefinido", "Plazo Fijo", "Honorarios"], horizontal=True)

sueldo_bruto = st.number_input(
    "Sueldo bruto",
    min_value=0, 
    step=1,
    format="%d"
)

# Gratificaciones (Se suman desp√∫es de las leyes sociales)
gratificaciones = st.number_input(
    "Agregue gratificaciones si aplican",
    min_value=0, 
    step=1,
    format="%d",
    help="Las gratificaciones se suman despu√©s de las leyes sociales al sueldo bruto"
)

leyes = calcular_leyes_sociales(sueldo_bruto, tipo_contrato)

sueldo_neto = sueldo_bruto - sum([
    leyes['afp'],
    leyes['salud'],
    leyes['cesantia_trabajador'], 
    leyes['cesantia_empleador'], 
    leyes['sis'], 
    leyes['atep']
    ])

porcentaje_afp = str(round(TASAS[tipo_contrato]['afp'] * 100, 2))
porcentaje_salud = str(round(TASAS[tipo_contrato]['salud'] * 100, 2))
porcentaje_cestrab = str(round(TASAS[tipo_contrato]['cesantia_trabajador'] * 100, 2))
porcentaje_cesemp = str(round(TASAS[tipo_contrato]['cesantia_empleador'] * 100, 2))
porcentaje_sis = str(round(TASAS[tipo_contrato]['sis'] * 100, 2))
porcentaje_atep = str(round(TASAS[tipo_contrato]['atep'] * 100, 2))


# # Formateo visual con separador de miles (solo display opcional)
# sueldo_bruto_formateado = f"{sueldo_bruto:,}".replace(",", ".")  # convierte 10000 ‚Üí "10.000"
# sueldo_neto_formateado = f"{sueldo_neto:,}".replace(",", ".")
# afp = f"{leyes['afp']:,}".replace(",", ".")
# salud = f"{leyes['salud']:,}".replace(",", ".")
# cesantia_trab = f"{leyes['cesantia_trabajador']:,}".replace(",", ".")
# cesantia_emp = f"{leyes['cesantia_empleador']:,}".replace(",", ".")
# sis = f"{leyes['sis']:,}".replace(",", ".")
# atep = f"{leyes['atep']:,}".replace(",", ".")

# === Tabla Resumen Desglose Sueldo ===

data = {
    "Concepto": [
        "Sueldo Neto",
        f"Previsi√≥n (AFP)",
        f"Salud (Fonasa/Isapre)",
        f"Cesant√≠a (Trabajador)",
        f"Cesant√≠a (Empleador)",
        f"SIS",
        f"ATEP",
        "Gratificaciones", # Reci√©n agregado 
        "Sueldo Bruto"
    ],
    "Porcentaje" : ["", 
                    f"{porcentaje_afp}%", 
                    f"{porcentaje_salud}%", 
                    f"{porcentaje_cestrab}%", 
                    f"{porcentaje_cesemp}%", 
                    f"{porcentaje_sis}%", 
                    f"{porcentaje_atep}%",
                    "",
                    ""
    ],
    "Monto CLP": [
        sueldo_neto, leyes['afp'], leyes['salud'],
        leyes['cesantia_trabajador'], leyes['cesantia_empleador'], leyes['sis'], leyes['atep'], gratificaciones , (sueldo_bruto + gratificaciones) # Se suman gratificaciones a sueldo final
    ]
}

df_montos = pd.DataFrame(data)

# st.write(f"**Tipo de contrato:** {tipo_contrato}")
# st.table(df_montos.style.format({"Monto CLP": "${:,.0f}"}))

# Funci√≥n para formatear montos con miles . y decimales ,
def formato_monto(valor):
    return f"${valor:,.0f}".replace(",", "X").replace(".", ",").replace("X", ".")

# Funci√≥n para formatear porcentajes (ya en decimal: 0.153 ‚Üí 15,30%)
def formato_porcentaje(valor_str):
    try:
        valor = float(valor_str.strip('%'))
        return f"{valor:.2f}".replace(".", ",") + "%"
    except:
        return valor_str  # por si viene vac√≠o o malformado

# Aplica formato
df_montos["Monto CLP"] = df_montos["Monto CLP"].apply(formato_monto)
df_montos["Porcentaje"] = df_montos["Porcentaje"].apply(formato_porcentaje)

if sueldo_bruto != 0:
    # st.subheader("Detalle de Descuentos y Leyes Sociales")
    st.markdown("### Res√∫men Sueldo y leyes sociales")
    #  Mostrar tabla
    st.write(f"**Tipo de contrato:** {tipo_contrato}")
    st.table(df_montos)

# === Comentarios ===

# Comentario opcional del usuario
st.divider()
comentario = st.text_area(
    "Comentario (opcional)", 
    placeholder="Agregue una nota o comentario"
)

# === Res√∫men ===

if not df_dias_por_cultivo.empty and "D√≠as" in df_dias_por_cultivo.columns:
    # Asegurarse de que d√≠as y sueldo neto est√©n en valores num√©ricos
    df_dias_por_cultivo["D√≠as"] = pd.to_numeric(df_dias_por_cultivo["D√≠as"], errors="coerce").fillna(0).astype(int)

    # Calcular total de d√≠as trabajados
    total_dias = df_dias_por_cultivo["D√≠as"].sum()

    # Calcular sueldo proporcional
    if total_dias > 0:
        df_dias_por_cultivo["monto_CLP"] = df_dias_por_cultivo["D√≠as"] / total_dias * sueldo_neto
        df_dias_por_cultivo["monto_CLP"] = df_dias_por_cultivo["monto_CLP"].round(0).astype(int)
    else:
        df_dias_por_cultivo["monto_CLP"] = 0

    # Formateo visual
    df_dias_por_cultivo["monto_CLP_fmt"] = df_dias_por_cultivo["monto_CLP"].apply(lambda x: f"${x:,.0f}".replace(",", "."))
    df_display = df_dias_por_cultivo[["Cultivo", "D√≠as", "monto_CLP_fmt"]].rename(columns={"monto_CLP_fmt": "Sueldo Bruto"})

    st.divider()
    st.markdown("### Res√∫men Sueldo y d√≠as trabajados por cultivo")
    st.write(f"Nombre: {nombre_trabajador}")
    st.write(f"Tipo de contrato: {tipo_contrato}")
    st.table(df_display)

# === Validaci√≥n ===

#   MODIFICAR A LA REALIDAD DEL FORMUARIO DE SUELDOS.

# # Inicializar estado si no existe
# if "registro_guardado" not in st.session_state:
#     st.session_state["registro_guardado"] = False

# if st.button("Guardar Registro"):
    # ‚Äî‚Äî‚Äî INICIO SECCI√ìN DE VALIDACI√ìN ‚Äî‚Äî‚Äî
    # errores = []

    # # 1) Campos generales obligatorios
    # if not descripcion.strip():
    #     errores.append("La descripci√≥n del gasto es obligatoria.")
    # if valor_bruto <= 0:
    #     errores.append("El valor bruto debe ser mayor que cero.")
    # if not ceco:
    #     errores.append("Debe seleccionar un Centro de Costos.")

    # else:
    #     # Si todo est√° en orden se procede a agregar los datos a la planilla

    #     def preparar_registro(sheet_name):
    #         """
    #         Prepara una hoja espec√≠fica de Google Sheets para registrar un nuevo dato.

    #         Args:
    #             sheet_name (str): Nombre de la hoja.

    #         Returns:
    #             sheet (gspread.Worksheet): Objeto Worksheet correspondiente.
    #             headers (list): Lista de nombres de columna.
    #             nuevo_index (int): N√∫mero de fila a insertar (sin contar encabezado).
    #             fecha_hora_actual (str): Timestamp en formato %d/%m/%Y %H:%M:%S.
    #         """
    #         sheet = get_fresh_spreadsheet().worksheet(sheet_name)
    #         headers = sheet.row_values(1)

    #         zona_horaria_chile = pytz.timezone('Chile/Continental')
    #         fecha_hora_actual = datetime.now(zona_horaria_chile).strftime("%d/%m/%Y %H:%M:%S")
    #         nuevo_index = len(sheet.get_all_values())

    #         return sheet, headers, nuevo_index, fecha_hora_actual

# === Bot√≥n de guardado ===

# 1. Ingrese sueldo bruto
#       - Que muestre desglose.
#       - Que permita dividir el sueldo seg√∫n d√≠as trabajados en x cultivo.
#       - Que se agregue nombre del trabajador. 

# 2. Desea agregar Gratificaciones?

# Nota: 
#   ¬øDebe haber secci√≥n banco tambi√©n?
#   ¬øSi se tiene a un trabajador contratado se debe auto agregar todos los meses su sueldo?
#   ¬øSe necesita info m√°s detallada del trabajador? Ej: RUT u otros.

# 3. Mostrar res√∫men
# 4. Secci√≥n "Comentario"
# 4. Enviar formulario